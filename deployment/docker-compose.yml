configs:
  api_config:
    file: ./api-config.yml
  caddy_config_file:
    file: ./Caddyfile.prod

services:
  postgres:
    image: postgis/postgis:13-3.3
    environment:
      - POSTGRES_USER=${POSTGRES_ADMIN}
      - POSTGRES_PASSWORD=${POSTGRES_ADMIN_PASSWORD}
      - POSTGRES_DB=timestrolls
    container_name: postgres
    hostname: postgres.timestrolls
    volumes:
      - postgres:/var/lib/postgresql/data
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d timestrolls"]

  migrate-postgres:
    image: flyway/flyway:latest
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - migrations_sql:/flyway/sql/db/migration # Import migrations to Flyway
    environment:
      FLYWAY_URL: jdbc:postgresql://postgres.timestrolls:5432/timestrolls
      FLYWAY_USER: ${POSTGRES_ADMIN}
      FLYWAY_PASSWORD: ${POSTGRES_ADMIN_PASSWORD}
      FLYWAY_PLACEHOLDERS_USER: ${POSTGRES_USER}
      FLYWAY_PLACEHOLDERS_PASSWORD: ${POSTGRES_USER_PASSWORD}
      FLYWAY_SCHEMAS: timestrolls
      FLYWAY_LOCATIONS: filesystem:/flyway/sql
    command: -connectRetries=60 migrate

  api:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: api
    hostname: api.timestrolls
    expose:
      - "8000"
    volumes:
      - migrations_sql:/app/migration
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_USER_PASSWORD=${POSTGRES_USER_PASSWORD}
      - SPACES_KEY=${SPACES_KEY}
      - SPACES_SECRET=${SPACES_SECRET}
      - API_KEY=${API_KEY}
    configs:
      - source: api_config
        target: /app/config.yml
        mode: 0444 # read only
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/ready"]
    depends_on:
      migrate-postgres:
        condition: service_completed_successfully

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: frontend
    hostname: frontend.timestrolls
    depends_on:
      api:
        condition: service_healthy
    expose:
      - "3000"
    restart: unless-stopped

  caddy:
    image: caddy:2.6.2-alpine
    container_name: caddy
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      frontend:
        condition: service_started
    configs:
      - source: caddy_config_file
        target: /etc/caddy/Caddyfile
        mode: 0444
    volumes:
      - caddy_data:/data
      - caddy_config:/config
    restart: always

volumes:
  caddy_data:
  caddy_config:
  migrations_sql:
  postgres:
