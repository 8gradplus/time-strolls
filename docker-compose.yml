services:
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=timestrolls
    container_name: postgres
    hostname: postgres.timestrolls
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d timestrolls"]

  migrate-postgres:
    image: flyway/flyway:latest
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - migrations_sql:/flyway/sql/db/migration # Import migrations to Flyway
    environment:
      FLYWAY_URL: jdbc:postgresql://postgres.timestrolls:5432/timestrolls
      FLYWAY_USER: postgres
      FLYWAY_PASSWORD: postgres
      FLYWAY_PLACEHOLDERS_USER: user
      FLYWAY_PLACEHOLDERS_PASSWORD: password
      FLYWAY_SCHEMAS: timestrolls
      FLYWAY_LOCATIONS: filesystem:/flyway/sql
    command: -connectRetries=60 migrate

  api:
    #image: time-strolls-api:latest
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: api
    hostname: api.timestrolls
    ports:
      - "8000:8000"
    expose:
      - "8000"
    volumes:
      - migrations_sql:/app/migration # Export migrations from API
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ready"]
    depends_on:
      migrate-postgres:
        condition: service_completed_successfully

  frontend:
    #image: time-strolls-frontend:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    hostname: frontend.timestrolls
    depends_on:
      api:
        condition: service_healthy
    expose:
      - "3000"
    restart: unless-stopped

  caddy:
    image: caddy:2.6.2-alpine
    container_name: caddy
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      frontend:
        condition: service_started
    volumes:
      - ./deployment/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    restart: always

volumes:
  caddy_data:
  caddy_config:
  migrations_sql:
  postgres:
